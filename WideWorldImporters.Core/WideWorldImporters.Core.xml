<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WideWorldImporters.Core</name>
    </assembly>
    <members>
        <member name="T:WideWorldImporters.Core.AutoMapper.MappingProfile">
            <summary>
            AutoMapper profiles:
            Add the AutoMapper profiles here
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.ClassAttributes.ServiceLifeTime">
            <summary>
            ServiceLifeTimeAttribute- Used to determine how a service should be injected.
            Can be used only for classes
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.ClassAttributes.ServiceLifeTime._lifetime">
            <summary>
            Lifetime (value). 
            Readonly means that it can set only in the constructor
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.ClassAttributes.ServiceLifeTime.Lifetime">
            <summary>
            Gets the lifetime.
            </summary>
            <value>
            The lifetime.
            </value>
        </member>
        <member name="M:WideWorldImporters.Core.ClassAttributes.ServiceLifeTime.#ctor(WideWorldImporters.Core.Enumerations.ServiceLifetime.Lifetime)">
            <summary>
            Constructor
            </summary>
            <param name="lifetime">Lifetime attribute</param>
        </member>
        <member name="M:WideWorldImporters.Core.ClassAttributes.ServiceLifeTime.GetLifetime">
            <summary>
            Gets the Lifetime of current attribute
            </summary>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.CoreServices.Implementation.RedisService">
            <summary>
            Implementation of redis caching service (Singleton)
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.CoreServices.Implementation.RedisService.RedisCache">
            <summary>
            Instance of redis
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.CoreServices.Implementation.RedisService.JsonSerializerSettings">
            <summary>
            JSON Serializer settings
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.CoreServices.Implementation.RedisService.StoredKeys">
            <summary>
            List of keys
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Implementation.RedisService.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Constructor
            </summary>
            <param name="distributedCache">Distributed caching (Redis)</param>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Implementation.RedisService.SetAsync``1(System.String,``0)">
            <summary>
            Sets an object of type T to a redis key
            </summary>
            <typeparam name="T">Type of object to set</typeparam>
            <param name="key">Key to access the object</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Implementation.RedisService.GetAsync``1(System.String)">
            <summary>
            Gets the data corresponding to a redis key
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key to access the object</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Implementation.RedisService.Exist(System.String)">
            <summary>
            Returns true if an entry with specified redis key exists
            </summary>
            <param name="key">Key to verify</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Implementation.RedisService.DeleteAsync(System.String)">
            <summary>
            Deletes a specified redis key asynchronously
            </summary>
            <param name="key">Key to delete</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Implementation.RedisService.DeleteAllAsync">
            <summary>
            Deletes everything from the redis database
            </summary>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.CoreServices.Interfaces.IRedisService">
            <summary>
            Interface for Redis Service
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Interfaces.IRedisService.SetAsync``1(System.String,``0)">
            <summary>
            Sets an object of type T to a redis key
            </summary>
            <typeparam name="T">Type of object to set</typeparam>
            <param name="key">Key to access the object</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Interfaces.IRedisService.GetAsync``1(System.String)">
            <summary>
            Gets the data corresponding to a redis key
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key to access the object</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Interfaces.IRedisService.Exist(System.String)">
            <summary>
            Returns true if an entry with specified redis key exists
            </summary>
            <param name="key">Key to verify</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Interfaces.IRedisService.DeleteAsync(System.String)">
            <summary>
            Deletes a specified redis key asynchronously
            </summary>
            <param name="key">Key to delete</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.CoreServices.Interfaces.IRedisService.DeleteAllAsync">
            <summary>
            Deletes everything from the redis database
            </summary>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.Enumerations.AuthenticationExceptionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.AuthenticationExceptionType.InvalidPassword">
            <summary>
            Invalid password
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.AuthenticationExceptionType.InvalidUsername">
            <summary>
            Invalid username
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.AuthenticationExceptionType.PasswordExpired">
            <summary>
            Password expired
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Enumerations.CorsPolicies">
            <summary>
            Enumerations for CORS policies
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.CorsPolicies.CorsWithSpecificOrigins">
            <summary>
            CORS with specific origins
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Enumerations.RedisKeys">
            <summary>
            Enumerations for REDIS keys
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.RedisKeys.Default">
            <summary>
            Default key
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Enumerations.ServiceLifetime">
            <summary>
            Service LifeTime attribute 
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Enumerations.ServiceLifetime.Lifetime">
            <summary>
            Enum of service lifetime
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.ServiceLifetime.Lifetime.Singleton">
            <summary>
            Singleton service
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.ServiceLifetime.Lifetime.Scoped">
            <summary>
            Scoped service
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Enumerations.ServiceLifetime.Lifetime.Transient">
            <summary>
            Transient service
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException">
            <summary>
            This exception is thrown when authentication fails.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="F:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException._message">
            <summary>
            The message
            </summary>
        </member>
        <member name="F:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException._exceptionType">
            <summary>
            The exception type
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException.#ctor(System.String,WideWorldImporters.Core.Enumerations.AuthenticationExceptionType)">
            <summary>
            Initializes a new instance of the <see cref="T:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException.GetExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Exceptions.PasswordExceptions.InvalidPasswordException">
            <summary>
            
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:WideWorldImporters.Core.Exceptions.PasswordExceptions.InvalidPasswordException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WideWorldImporters.Core.Exceptions.PasswordExceptions.InvalidPasswordException"/> class.
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.Exceptions.PasswordExceptions.InvalidPasswordException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.ApplicationBuilderExtensions">
            <summary>
            ExtensionMethods for IApplicationBuilder
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ApplicationBuilderExtensions.UseCustomExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Extension Method to use custom exception handler
            </summary>
            <param name="applicationBuilder">Application Builder</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ApplicationBuilderExtensions.MigrateDatabase(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Migrates the database.
            </summary>
            <param name="applicationBuilder">The application builder.</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions">
            <summary>
            Extension methods for Datetime
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.StartOfMinute(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the start of minute
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.EndOfMinute(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the end of minute
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.StartOfHour(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the start of hour
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.EndOfHour(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the end of hour
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.StartOfDay(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the start of day
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the end of day
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.StartOfWeek(System.DateTime,System.Nullable{System.DayOfWeek})">
            <summary>
            Start of week
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <param name="startingDayOfWeek">Starting day of week. Default is Monday</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.EndOfWeek(System.DateTime,System.Nullable{System.DayOfWeek})">
            <summary>
            End of week
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <param name="startingDayOfWeek">Starting day of week. Default Monday</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.StartOfMonth(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the start of month
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.EndOfMonth(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the end of day
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.StartOfYear(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the start of year
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.EndOfYear(System.DateTime)">
            <summary>
            Returns the instance of Datetime representing the end of year
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.IsInFuture(System.DateTime)">
            <summary>
            Returns True if the provided DateTime is in the future, otherwise False
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Returns True if the provided DateTime is Saturday or Sunday, otherwise False
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.InBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns true of the provided DateTime is between startTime and endTime, 
            inclusive specifies if the startTime and the endTime needs to be taken into consideration or not
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
            <param name="inclusive">Specifies if the Start time and End time needs to be taken into consideration or not</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.IsToday(System.DateTime)">
            <summary>
            Returns true if the provided instance of Datetime is within today, otherwise False
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.IsCurrentMonth(System.DateTime)">
            <summary>
            Returns true if the provided instance of Datetime is within the current month, otherwise false
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.IsCurrentYear(System.DateTime)">
            <summary>
            Returns true if the provided instance of Datetime is within the current year, otherwise false
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DatetimeExtensions.GetCalenderWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns the Calender Week of the provided instance of datetime
            </summary>
            <param name="dateTime">Instance of Datetime</param>
            <param name="startingDay">Starting day of week (default is Monday, German standard)</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.DbSetExtensions">
            <summary>
            Extension methods for DbSet
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DbSetExtensions.AsNonTrackingQueryable``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
            Converts a DbSet to IQueryable which is not tracked
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="dbSet">DbSet</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DbSetExtensions.AddOrUpdate``1(Microsoft.EntityFrameworkCore.DbSet{``0},``0)">
            <summary>
            Adds the or update.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbSet">The database set.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DbSetExtensions.AddOrUpdate``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0)">
            <summary>
            Adds the or update.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbSet">The database set.</param>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DbSetExtensions.GetContext``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
            Gets the context.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="dbSet">The database set.</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.DictionaryExtensions">
            <summary>
            Extension Methods for Dictionary
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value or default.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions">
            <summary>
            Extension methods for IEnumerable
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.ToCsv``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an IEnumerable to its CSV representation
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="list">IEnumerable of Type T to convert to CSV</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups a IEnumerable w.r.t. an attribute
            </summary>
            <typeparam name="TSource">Type of source IEnumerable</typeparam>
            <typeparam name="TKey">Type of attribute of IEnumerable w.r.t. the IEnumerable must be grouped</typeparam>
            <param name="source">Source IEnumerable</param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a random element for the IEnumerable
            </summary>
            <typeparam name="T">Type of source IEnumerable</typeparam>
            <param name="source">Source IEnumerable collection</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.GetRandomShuffled``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Gets a random element for the IEnumerable after one shuffle
            </summary>
            <typeparam name="T">Type of source IEnumerable</typeparam>
            <param name="source">Source IEnumerable collection</param>
            <param name="shuffleTimes">Number of times to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns 'true' if an IEnumerable is empty. False otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Partitions the list into specified chunk size.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceList">The source list.</param>
            <param name="chunkSize">Size of the chunk.</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.EnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Partitions the specified source list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceList">The source list.</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.ListExtensions">
            <summary>
            Extension methods for IList
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles an IList using Cryptographically secure randomization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ListExtensions.ToCsv``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts a Generic List to its CSV representation
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="list">List of Type T to convert to CSV</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ListExtensions.DeepClone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            TODO: Fix this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps contents of firstIndex with secondIndex
            </summary>
            <typeparam name="T">Type of IList</typeparam>
            <param name="source">Source IList</param>
            <param name="firstIndex">First index</param>
            <param name="secondIndex">Second index</param>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.ObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ObjectExtensions.DeepCloneObject(System.Object)">
            <summary>
            Deep clone an Object
            TODO: Debug and verify
            </summary>
            <param name="sourceObject">Object to clone</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ObjectExtensions.DeepClone(System.Object)">
            <summary>
            Deep clones an object using Force DeepCloner
            </summary>
            <param name="sourceObject">Source object to clone</param>
            <returns>Cloned copy of sourceObject</returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.ObjectExtensions.DeepCompare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.QueryableExtensions">
            <summary>
            Extension methods for IQueryable
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.QueryableExtensions.ChunkData``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Simple method to chunk a source IQueryable into smaller (more manageable) lists
            </summary>
            <param name="source">The large IQueryable to split</param>
            <param name="chunkSize">The maximum number of items each subset should contain</param>
            <returns>An IEnumerable of the original source IEnumerable in bite size chunks</returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.QueryableExtensions.ChunkData``1(System.Linq.IQueryable{``0})">
            <summary>
            Simple method to chunk a source IQueryable into smaller (more manageable) lists
            </summary>
            <param name="source">The large IQueryable to split</param>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.QueryableExtensions.ToSql``1(System.Linq.IQueryable{``0})">
            <summary>
            Converts a IQueryable to equivalent SQL Statement.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.StringExtensions">
            <summary>
            Extension methods for string
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.StringExtensions.IsValidEmail(System.String)">
            <summary>
            Returns true of the provided string represents an email. Otherwise false.
            Does not actually verify the email. 
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.StringExtensions.IsValidPassword(System.String)">
            <summary>
            Returns true of the provided string represents an email. Otherwise false.
            Does not actually verify the email. 
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.StringExtensions.ContainsSpecialCharacters(System.String)">
            TODO: Optimize this
            <summary>
            Returns true of the provided string represents an email. Otherwise false.
            Does not actually verify the email. 
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.StringExtensions.Randomize(System.String)">
            <summary>
            Randomizes a string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.StringExtensions.RemoveDuplicates(System.String)">
            <summary>
            Remove duplicate characters from a string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.SwaggerExtensions">
            <summary>
            Extensions for Swagger
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.SwaggerExtensions.AddSwaggerDocumentation(Microsoft.Extensions.DependencyInjection.IServiceCollection,Swashbuckle.AspNetCore.Swagger.Info,Swashbuckle.AspNetCore.Swagger.ApiKeyScheme)">
            <summary>
            Extension method to configure swagger and add documentation
            </summary>
            <param name="services"></param>
            <param name="info"></param>
            <param name="apiKeyScheme"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.ExtensionMethods.SwaggerExtensions.UseSwaggerDocumentation(Microsoft.AspNetCore.Builder.IApplicationBuilder,Swashbuckle.AspNetCore.Swagger.Info)">
            <summary>
            Extension method to use swagger documentation
            </summary>
            <param name="app"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.ExtensionMethods.TypeExtensions">
            <summary>
            Extension methods for Type
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Helpers.CharHelpers">
            <summary>
            Utility functions for characters
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.CharHelpers.GetRandomUppercaseCharacter">
            <summary>
            Returns a random uppercase character
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.CharHelpers.GetRandomLowercaseCharacter">
            <summary>
            Returns a random lowercase character
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.CharHelpers.GetRandomSpecialCharacter">
            <summary>
            Returns a random lowercase character
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.CharHelpers.GetRandomCharacter">
            <summary>
            Returns a random character
            </summary>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.Helpers.IntHelpers">
            <summary>
            Utility functions for integers
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.IntHelpers.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates a cryptographically secure random number between min and max
            </summary>
            <param name="min">Lower bound</param>
            <param name="max">Upper bound</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.IntHelpers.GetRandomNumber(System.Int32)">
            <summary>
            Generates a cryptographically secure random number between 0 and max
            </summary>
            <param name="max">Upper bound</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.Helpers.RandomHelpers">
            <summary>
            Generates Cryptographically secure random numbers using RNGCryptoServiceProvider
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.RandomHelpers.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.RandomHelpers.Next(System.Int32)">
            <summary>
            Get the next random integer
            </summary>
            <param name="max">Max value to generate</param>
            <returns>Random [Int32]</returns>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.RandomHelpers.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number between 'min' and 'max'
            </summary>
            <param name="min">Min value to generate</param>
            <param name="max">Max value to generate</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.Helpers.StringHelpers">
            <summary>
            Helper functions for strings
            </summary>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.StringHelpers.GetRandomString(System.Int32,System.Boolean)">
            <summary>
            Returns a randomString of specified length
            </summary>
            <param name="length"></param>
            <param name="printable"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.StringHelpers.GetRandomPassword(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Core.Helpers.StringHelpers.ReplaceDuplicateCharacters(System.String)">
            <summary>
            Replaces the duplicate characters in a string by a random character at the end
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Core.InternalModels.ApiServiceDescription">
            <summary>
            Describes a service
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.InternalModels.ApiServiceDescription.Implementation">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.InternalModels.ApiServiceDescription.Interface">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.InternalModels.ApiServiceDescription.Lifetime">
            <summary>
            Describes the lifetime of the service
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Options.JWTKeySettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.Options.JWTKeySettings.ExpireInDays">
            <summary>
            Expiry in days
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.Options.JWTKeySettings.SigningKey">
            <summary>
            Signing key
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.Options.JWTKeySettings.ApiKey">
            <summary>
            Api Key
            </summary>
        </member>
        <member name="T:WideWorldImporters.Core.Options.PerformanceOptions">
            <summary>
            PerformanceOptions
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.Options.PerformanceOptions.UseResponseCompression">
            <summary>
            Boolean to indicate if response compression should be used
            </summary>
        </member>
        <member name="P:WideWorldImporters.Core.Options.PerformanceOptions.UseExceptionHandlingMiddleware">
            <summary>
            Boolean to indicate if exception handling middleware should be used
            </summary>
        </member>
    </members>
</doc>
