<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WideWorldImporters.Services</name>
    </assembly>
    <members>
        <member name="T:WideWorldImporters.Services.ExtensionMethods.ServiceCollectionExtensions">
            <summary>
            Extension methods for ServiceCollection
            </summary>
        </member>
        <member name="M:WideWorldImporters.Services.ExtensionMethods.ServiceCollectionExtensions.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Register services for Dependency Injection
            </summary>
            <param name="serviceCollection"></param>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.ExtensionMethods.ServiceCollectionExtensions.GetSingletonServices(System.String)">
            <summary>
            Gets all Singleton services
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.ExtensionMethods.ServiceCollectionExtensions.GetTransientServices(System.String)">
            <summary>
            Gets all Transient services
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.ExtensionMethods.ServiceCollectionExtensions.GetScopedServices(System.String)">
            <summary>
            Gets all Scoped services
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.ExtensionMethods.ServiceCollectionExtensions.GetServicesByType(WideWorldImporters.Core.Enumerations.ServiceLifetime.Lifetime,System.String)">
            <summary>
            Returns all services of a particular type
            </summary>
            <param name="namespaceName">Namespace name</param>
            <param name="lifetime">Type of service</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.ExtensionMethods.ServiceCollectionExtensions.GetAllServices(System.String)">
            <summary>
            Retrives all services in a namespace
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Services.Interfaces.ISampleService">
            <summary>
            Interface for Sample Service for Testing
            </summary>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.ISampleService.HelloWorld">
            <summary>
            Hello World
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.ISampleService.GetVehicleTempsAsync">
            <summary>
            Gets vehicle temperatures
            </summary>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Services.Interfaces.IWWIAuthenticationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.IWWIAuthenticationService.AddUserAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Adds an user
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="email">Email</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.IWWIAuthenticationService.AddUserAndRoleAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds an user with role
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="email">Email</param>
            <param name="role">Role</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.IWWIAuthenticationService.AddRole(System.String,System.Boolean,System.String)">
            <summary>
            Adds a role
            </summary>
            <param name="role">Role</param>
            <param name="isAdmin">Indicates if this role is an Admin role</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.IWWIAuthenticationService.AuthenticateUserAsync(System.String,System.String)">
            <summary>
            Authenticates a user with a given username and password
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.IWWIAuthenticationService.UpdatePasswordAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Updates the password for a username. 
            </summary>
            <param name="username">Username</param>
            <param name="oldPassword">Old password</param>
            <param name="newPassword">New password</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Interfaces.IWWIAuthenticationService.ResetPasswordAsync(System.String,System.String)">
            <summary>
            Resets the password for a username. A new password is randomly generated and assigned.
            </summary>
            <param name="username">Username</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Services.ServiceCollections.ApplicationServices">
            <summary>
            Services for the application
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.ServiceCollections.ApplicationServices.DbContext">
            <summary>
            Application Database context
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.ServiceCollections.ApplicationServices.AuthDbContext">
            <summary>
            Authentication Provider DATA
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.ServiceCollections.ApplicationServices.AutoMapper">
            <summary>
            AutoMapper 
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.ServiceCollections.ApplicationServices.MemoryCache">
            <summary>
            InMemory Local Caching
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.ServiceCollections.ApplicationServices.RedisService">
            <summary>
            Redis Caching
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.ServiceCollections.ApplicationServices.Logger">
            <summary>
            Logging service
            </summary>
        </member>
        <member name="M:WideWorldImporters.Services.ServiceCollections.ApplicationServices.#ctor(WideWorldImporters.Models.Database.WideWorldImportersContext,AutoMapper.IMapper,Microsoft.Extensions.Caching.Memory.IMemoryCache,WideWorldImporters.Core.CoreServices.Interfaces.IRedisService,WideWorldImporters.Logger.Implementation.AppLoggers,WideWorldImporters.AuthenticationProvider.Database.AuthenticationProviderContext)">
            <summary>
            Constructor
            </summary>
            <param name="dbContext">Database context</param>
            <param name="autoMapper">AutoMapper</param>
            <param name="memoryCache">Memory Caching</param>
            <param name="redisService">Redis Caching</param>
            <param name="logger">Logging Service</param>
            <param name="authDbContext">Authorization Database Context</param>
        </member>
        <member name="T:WideWorldImporters.Services.Services.Base.BaseService">
            <summary>
            Base classes for all services
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.Services.Base.BaseService.AppServices">
            <summary>
            Application Services
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.Services.Base.BaseService.DbContext">
            <summary>
            Application Database context
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.Services.Base.BaseService.AuthDbContext">
            <summary>
            Authentication Provider DATA
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.Services.Base.BaseService.AutoMapper">
            <summary>
            AutoMapper
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.Services.Base.BaseService.MemoryCache">
            <summary>
            Memory Caching
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.Services.Base.BaseService.RedisService">
            <summary>
            Redis Cache Service
            </summary>
        </member>
        <member name="P:WideWorldImporters.Services.Services.Base.BaseService.Logger">
            <summary>
            Logging service
            </summary>
        </member>
        <member name="M:WideWorldImporters.Services.Services.Base.BaseService.#ctor(WideWorldImporters.Services.ServiceCollections.ApplicationServices)">
            <summary>
            Constructor
            </summary>
            <param name="applicationServices"></param>
        </member>
        <member name="M:WideWorldImporters.Services.Services.Base.BaseService.Log(System.String)">
            <summary>
            Logs a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:WideWorldImporters.Services.Services.Base.BaseService.Log(System.Exception)">
            <summary>
            Logs a message
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:WideWorldImporters.Services.Services.SampleService">
            <summary>
            Sample Service for Testing
            </summary>
        </member>
        <member name="M:WideWorldImporters.Services.Services.SampleService.#ctor(WideWorldImporters.Services.ServiceCollections.ApplicationServices)">
            <summary>
            
            </summary>
            <param name="applicationServices"></param>
        </member>
        <member name="M:WideWorldImporters.Services.Services.SampleService.HelloWorld">
            <summary>
            Hello world
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Services.SampleService.GetVehicleTempsAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:WideWorldImporters.Services.Services.WWIAuthenticationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.#ctor(WideWorldImporters.Services.ServiceCollections.ApplicationServices,Microsoft.Extensions.Options.IOptionsSnapshot{WideWorldImporters.Core.Options.JWTKeySettings},Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Constructor
            </summary>
            <param name="applicationServices">Application Services</param>
            <param name="jwtOptions">JWT Options</param>
            <param name="hostingEnvironment">Hosting Environment</param>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.AddUserAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Adds an user
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="email">Email</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.AddRole(System.String,System.Boolean,System.String)">
            <summary>
            Adds a role
            </summary>
            <param name="role">Role</param>
            <param name="isAdmin">Indicates if this role is an Admin role</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.AddUserAndRoleAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds an user with role
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="email">Email</param>
            <param name="role">Role</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.AuthenticateUserAsync(System.String,System.String)">
            <summary>
            Authenticates a user with a given username and password
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <returns></returns>
            <exception cref="T:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException">Authentication Exception</exception>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.UpdatePasswordAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Updates the password for a username. 
            </summary>
            <param name="username">Username</param>
            <param name="oldPassword">Old password</param>
            <param name="newPassword">New password</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Invalid username, password or API Key</exception>
            <exception cref="T:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.PasswordExpiredException">Expired password</exception>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.ResetPasswordAsync(System.String,System.String)">
            <summary>
            Resets the password for a username. A new password is randomly generated and assigned.
            </summary>
            <param name="username">Username</param>
            <param name="apiKey">API Key</param>
            <returns></returns>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.AuthenticateUsernameAndPasswordAsync(System.String,System.String,System.Boolean)">
            <summary>
            Authenticates a username and password and generated a JWT if the credentials are correct
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="verifyPasswordValidity"></param>
            <returns></returns>
            <exception cref="T:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException">Authentication Exception</exception>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.VerifyUsernameAndPassword(System.String,System.String,System.Boolean)">
            <summary>
            Verifies a username and password
            </summary>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="verifyPasswordValidity">Indicates if the validity of the password must be verified</param>
            <returns></returns>
            <exception cref="T:WideWorldImporters.Core.Exceptions.AuthenticationExceptions.AuthenticationException">Authentication Exception</exception>
        </member>
        <member name="M:WideWorldImporters.Services.Services.WWIAuthenticationService.GenerateJwtTokenAsync(WideWorldImporters.AuthenticationProvider.Database.Users)">
            <summary>
            Generates a JWT for a given user
            </summary>
            <param name="user">User for whom the token must be generated.</param>
            <returns></returns>
        </member>
    </members>
</doc>
